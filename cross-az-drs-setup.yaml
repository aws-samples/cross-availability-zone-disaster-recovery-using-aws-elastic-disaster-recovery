AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template deploys the infrastructure components required to simulate 
  a cross AZ disaster recovery scenario using Elastic Disaster Recovery (DRS).

  **WARNING** You will be billed for the AWS resources created if you create a stack from this template.

  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
  SPDX-License-Identifier: MIT-0

Parameters:
  PrimaryVpcCIDR:
    Description: Enter the IP range (CIDR notation) for the primary VPC
    Type: String
    Default: 10.0.1.0/24
  StagingVpcCIDR:
    Description: Enter the IP range (CIDR notation) for the DRS staging VPC
    Type: String
    Default: 10.0.2.0/24
  RecoveryVpcCIDR:
    Description: Enter the IP range (CIDR notation) for the DRS recovery VPC
    Type: String
    Default: 10.0.3.0/24
  PrimaryPublicSubnetCIDR:
    Description: Enter the IP range (CIDR notation) for the primary subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/27
  StagingPrivateSubnetCIDR:
    Description: Enter the IP range (CIDR notation) for the staging subnet in the second Availability Zone
    Type: String
    Default: 10.0.2.0/27
  RecoveryPublicSubnetCIDR:
    Description: Enter the IP range (CIDR notation) for the recovery subnet in the third Availability Zone
    Type: String
    Default: 10.0.3.0/27
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access or password decryption to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  LatestAmiId:
    Description: The latest Amazon Linux 2 AMI ID
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  WebServerInstanceType:
    Description: Web Server instance type
    Type: String
    Default: t3.small
  IpLocation:
    Description: The IP address range that can be used to SSH & RDP into the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DRSVpcEndpoint:
    Description: DRS VPC endpoint service name. Update for your region.
    Type: String
    Default: com.amazonaws.ap-southeast-2.drs
  EC2VpcEndpoint:
    Description: EC2 VPC endpoint service name. Update for your region.
    Type: String
    Default: com.amazonaws.ap-southeast-2.ec2
  S3VpcEndpoint:
    Description: S3 VPC endpoint service name. Update for your region.
    Type: String
    Default: com.amazonaws.ap-southeast-2.s3
  DRSGroupName:
    Type: String
    Default: DRSGroup
    Description: Name for the IAM Group used in DRS operations

Resources:
  # Primary Virtual Private Cloud (VPC)
  PrimaryVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref PrimaryVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: blog-primary-vpc

  # Staging Virtual Private Cloud (VPC)
  StagingVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref StagingVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: blog-staging-vpc

  # Recovery Virtual Private Cloud (VPC)
  RecoveryVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref RecoveryVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: blog-recovery-vpc

  # VPC Peering Connection between PrimaryVPC and StagingVPC
  PrimaryStagingVPCPeering:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref PrimaryVPC
      PeerVpcId: !Ref StagingVPC
      PeerRegion: !Ref "AWS::Region"

  # VPC Peering Connection between Recovery VPC and Staging VPC
  RecoveryStagingVPCPeering:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref RecoveryVPC
      PeerVpcId: !Ref StagingVPC
      PeerRegion: !Ref "AWS::Region"

  # Primary public subnet in the first availability zone
  PrimaryPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PrimaryVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrimaryPublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: blog-primary-public-subnet

  # Primary public route table
  PrimaryPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PrimaryVPC
      Tags:
        - Key: Name
          Value: blog-primary-public-route-table

  # Default route for internet traffic to the Primary VPC internet gateway
  DefaultPrimaryPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: PrimaryInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PrimaryPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref PrimaryInternetGateway

  # Create a route in PrimaryPublicRouteTable for PrimaryStagingVPCPeering
  PrimaryStagingVPCPeeringRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrimaryPublicRouteTable
      DestinationCidrBlock: !GetAtt StagingVPC.CidrBlock
      VpcPeeringConnectionId: !Ref PrimaryStagingVPCPeering

  # Create a route in StagingPrivateRouteTable for StagingPrimaryVPCPeering
  StagingPrimaryVPCPeeringRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref StagingPrivateRouteTable
      DestinationCidrBlock: !GetAtt PrimaryVPC.CidrBlock
      VpcPeeringConnectionId: !Ref PrimaryStagingVPCPeering

  # Route in RecoveryPublicRouteTable to route StagingVPC traffic through VPC Peering
  RecoveryStagingVPCPeeringRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RecoveryPublicRouteTable
      DestinationCidrBlock: !Ref StagingVpcCIDR
      VpcPeeringConnectionId: !Ref RecoveryStagingVPCPeering

  # Route in StagingPrivateRouteTable to route StagingVPC traffic through VPC Peering
  StagingRecoveryVPCPeeringRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref StagingPrivateRouteTable
      DestinationCidrBlock: !Ref RecoveryVpcCIDR
      VpcPeeringConnectionId: !Ref RecoveryStagingVPCPeering

  # Associate Primary public subnet to the Primary public route table
  PrimaryPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrimaryPublicRouteTable
      SubnetId: !Ref PrimaryPublicSubnet

  # Staging private subnet in the second availability zone
  StagingPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StagingVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref StagingPrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: blog-staging-private-subnet

  # Staging private route table
  StagingPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StagingVPC
      Tags:
        - Key: Name
          Value: blog-staging-private-route-table

  # Associate Staging private subnet to the Staging private route table
  StagingPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref StagingPrivateRouteTable
      SubnetId: !Ref StagingPrivateSubnet

  # Internet Gateway for the Primary VPC
  PrimaryInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: blog-primary-igw

  # Attach the Internet Gateway to the Primary VPC
  PrimaryInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref PrimaryInternetGateway
      VpcId: !Ref PrimaryVPC

  # Internet Gateway to allow communication between the Recovery VPC and internet
  RecoveryInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: blog-recovery-igw

  # Attaches the internet gateway to the Recovery VPC
  RecoveryInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref RecoveryInternetGateway
      VpcId: !Ref RecoveryVPC

  # Recovery public subnet in the third availability zone
  RecoveryPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RecoveryVPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Ref RecoveryPublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: blog-recovery-public-subnet

  # Recovery public route table
  RecoveryPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref RecoveryVPC
      Tags:
        - Key: Name
          Value: blog-recovery-public-route-table

  # Default route for internet traffic to the Recovery VPC internet gateway
  DefaultRecoveryPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: RecoveryInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RecoveryPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref RecoveryInternetGateway

  # Associate Recovery public subnet to the Recovery public route table
  RecoveryPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RecoveryPublicRouteTable
      SubnetId: !Ref RecoveryPublicSubnet

  # Web server security group
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: !Ref "IpLocation"
          Description: "Allow HTTP access from outside the VPC"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref IpLocation
          Description: "Allow SSH access from outside the VPC"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref "IpLocation"
          Description: "Allow outbound access on all ports"
      Tags:
        - Key: Name
          Value: blog-webserver-sg
      VpcId: !Ref PrimaryVPC

  # Security group for the DRSInterfaceEndpoint with the source/destination as the StagingVPC CIDR
  DRSInterfaceEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable DRS interface endpoint access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: !Ref "StagingVpcCIDR"
          Description: "Allow HTTPS access from Staging VPC"
        - IpProtocol: tcp
          FromPort: 1500
          ToPort: 1500
          CidrIp: !Ref "StagingVpcCIDR"
          Description: "Allow replication port TCP access from Staging VPC"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 0
          CidrIp: !Ref "IpLocation"
          Description: "Allow outbound access on all ports"
      Tags:
        - Key: Name
          Value: blog-drs-interface-endpoint-sg
      VpcId: !Ref StagingVPC

  # VPC interface endpoint for Elastic Disaster Recovery that is associated with StagingPrivateSubnet and DNS name enabled
  DRSInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Ref DRSVpcEndpoint
      VpcId: !Ref StagingVPC
      SubnetIds:
        - !Ref StagingPrivateSubnet
      SecurityGroupIds:
        - !Ref DRSInterfaceEndpointSecurityGroup
      PrivateDnsEnabled: true
      VpcEndpointType: Interface

  # VPC interface endpoint for Amazon EC2 that is associated with StagingPrivateSubnet and DNS name enabled
  EC2InterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Ref EC2VpcEndpoint
      VpcId: !Ref StagingVPC
      SubnetIds:
        - !Ref StagingPrivateSubnet
      SecurityGroupIds:
        - !Ref DRSInterfaceEndpointSecurityGroup
      PrivateDnsEnabled: true
      VpcEndpointType: Interface

  # VPC gateway endpoint for Amazon S3 that is associated with StagingPrivateRouteTable
  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Ref S3VpcEndpoint
      VpcId: !Ref StagingVPC
      RouteTableIds:
        - !Ref StagingPrivateRouteTable

  # Create an EC2 instance from the latest Linux AMI in the primary VPC and include UserData to install an NGINX webserver
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref WebServerInstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
        - DeviceName: /dev/sdh
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !GetAtt WebServerSecurityGroup.GroupId
          SubnetId: !Ref PrimaryPublicSubnet
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo amazon-linux-extras install -y nginx1
          sudo systemctl start nginx
          sudo systemctl enable nginx
      Tags:
        - Key: Name
          Value: blog-webserver-instance

  # Recovery instance security group
  RecoverySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable recovery RDP access via port 3389, replication via port 1500
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref "IpLocation"
          Description: "Allow HTTP access from outside the VPC"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref "IpLocation"
          Description: "Allow SSH access from outside the VPC"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref "IpLocation"
          Description: "Allow outbound access on all ports"
      Tags:
        - Key: Name
          Value: blog-recovery-sg
      VpcId: !Ref RecoveryVPC

  # Elastic Disaster Recovery IAM Replication Agent Group
  DRSIAMGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Ref DRSGroupName

  # Elastic Disaster Recovery IAM Replication Agent User
  DRSIAMUser:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - "DRSGroup"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSElasticDisasterRecoveryAgentInstallationPolicy
        - arn:aws:iam::aws:policy/AWSElasticDisasterRecoveryFailbackInstallationPolicy
      UserName: "DRSAgentUser"

  DRSIAMAccessKey:
    Type: AWS::IAM::AccessKey
    DependsOn: DRSIAMUser
    Properties:
      UserName: "DRSAgentUser"

Outputs:
  DRSIAMAccessKeyId:
    Description: IAM user access key ID
    Value: !Ref DRSIAMAccessKey
    Export:
      Name: "DRSIAMAccessKeyId"

  DRSIAMSecretAccessKey:
    Description: IAM user secret access key
    Value: !GetAtt DRSIAMAccessKey.SecretAccessKey
    Export:
      Name: "DRSIAMSecretAccessKey"
